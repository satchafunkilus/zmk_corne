
#define COMBO_TERM_FAST 20
#define COMBO_TERM_SLOW 35

// make homerow combos tap-only (so HRMs can be chorded instantaneously)
//#define HRC_TAB    &hml         LA(LCTRL) TAB
//#define HRC_REPEAT &hml_repeat  LS(LCTRL) 0
#define HRC_LPAR   &hmr_lpar_lt RS(LCTRL) 0
#define HRC_RPAR   &hmr_rpar_gt LA(LCTRL) 0

// tap: left-parenthesis | shft + tap: less-than
ZMK_BEHAVIOR(lpar_lt, mod_morph,
    bindings = <&kp LPAR>, <&kp LT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: right-parenthesis | shft + tap: greater-than
ZMK_BEHAVIOR(rpar_gt, mod_morph,
    bindings = <&kp RPAR>, <&kp GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


/* Horizontal combos - right hand */
ZMK_COMBO(crt,  &wink,          RT0 RT1,     BASE QWE SYM, COMBO_TERM_FAST)
ZMK_COMBO(amp,  &kp AMPS,       RT1 RT2,     BASE QWE SYM, COMBO_TERM_FAST)
ZMK_COMBO(anf,  &kp DQT,        RT2 RT3,     BASE QWE SYM, COMBO_TERM_FAST)
ZMK_COMBO(apo,  &kp SQT,        RT3 RT4,     BASE QWE SYM, COMBO_TERM_FAST)

ZMK_COMBO(min,   &kp MINUS,     RM0 RM1,     BASE QWE        , COMBO_TERM_FAST)
ZMK_COMBO(lpar,  HRC_LPAR,      RM1 RM2,     BASE QWE        , COMBO_TERM_FAST)
ZMK_COMBO(rpar,  HRC_RPAR,      RM2 RM3,     BASE QWE        , COMBO_TERM_FAST)
ZMK_COMBO(lt,    &kp LT,        RM1 RM2,              NAV SYM, COMBO_TERM_FAST)
ZMK_COMBO(gt,    &kp GT,        RM2 RM3,              NAV SYM, COMBO_TERM_FAST)

ZMK_COMBO(und,   &kp UNDER,     RB0 RB1,     BASE QWE        , COMBO_TERM_FAST)
ZMK_COMBO(lbkt,  &kp LBKT,      RB1 RB2,     BASE QWE        , COMBO_TERM_FAST)
ZMK_COMBO(rbkt,  &kp RBKT,      RB2 RB3,     BASE QWE        , COMBO_TERM_FAST)
ZMK_COMBO(lbrc,  &kp LBRC,      RB1 RB2,              NAV SYM, COMBO_TERM_FAST)
ZMK_COMBO(rbrc,  &kp RBRC,      RB2 RB3,              NAV SYM, COMBO_TERM_FAST)



// Additional unicode symbols
ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)

ZMK_UNICODE_PAIR(es_n,    N0, N0,  F,  1,    N0, N0,  D,  1)
ZMK_UNICODE_PAIR(cedi,    N0, N0,  E,  7,    N0, N0,  C,  7)

ZMK_UNICODE_PAIR(a_gr,    N0, N0,  E,  0,    N0, N0,  C,  0)
ZMK_UNICODE_PAIR(a_acu,   N0, N0,  E,  1,    N0, N0,  C,  1)
ZMK_UNICODE_PAIR(a_circ,  N0, N0,  E,  2,    N0, N0,  C,  2)

ZMK_UNICODE_PAIR(e_gr,    N0, N0,  E,  8,    N0, N0,  C,  8)
ZMK_UNICODE_PAIR(e_acu,   N0, N0,  E,  9,    N0, N0,  C,  9)
ZMK_UNICODE_PAIR(e_circ,  N0, N0,  E,  A,    N0, N0,  C,  A)

ZMK_UNICODE_PAIR(i_gr,    N0, N0,  E,  C,    N0, N0,  C,  C)
ZMK_UNICODE_PAIR(i_acu,   N0, N0,  E,  D,    N0, N0,  C,  D)
ZMK_UNICODE_PAIR(i_circ,  N0, N0,  E,  E,    N0, N0,  C,  E)

ZMK_UNICODE_PAIR(o_gr,    N0, N0,  F,  2,    N0, N0,  D,  2)
ZMK_UNICODE_PAIR(o_acu,   N0, N0,  F,  3,    N0, N0,  D,  3)
ZMK_UNICODE_PAIR(o_circ,  N0, N0,  F,  4,    N0, N0,  D,  4)

ZMK_UNICODE_PAIR(u_gr,    N0, N0,  F,  9,    N0, N0,  D,  9)
ZMK_UNICODE_PAIR(u_acu,   N0, N0,  F,  A,    N0, N0,  D,  A)
ZMK_UNICODE_PAIR(u_circ,  N0, N0,  F,  B,    N0, N0,  D,  B)



// Conditional layer
//ZMK_CONDITIONAL_LAYER(1 2, 4)

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
ignored-key-positions = <LT1>;
)

ZMK_BEHAVIOR(swapper_r, tri_state,
bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
ignored-key-positions = <LT0>;
)