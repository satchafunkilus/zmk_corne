/*
 * Copyright (c) 2020 The ZMK Contributo
 *
 * SPDX-License-Identifier: MIT
 */
//#define HOST_OS 2

#include <behaviors.dtsi>
#include "../zmk-nodefree-config/helper.h"

//#include "../zmk-nodefree-config/international_chars/german_alt.dtsi"

#include "../zmk-nodefree-config/international_chars/german.dtsi"
#include "makros.dtsi"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer names

#define BASE    0
#define QWE     1
#define NAV     2
#define SYM     3
#define NUM     4
#define FUN     5
#define UML     6

// Umlaut as Mod-Tap

#define AUML &de_ae
#define OUML &de_oe
#define UUML &de_ue
#define DESZ &de_eszett
#define EUR  &euro_sign
#define FOPT &ppt_fp

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    macros {
        ppt_fp: ppt_fp {
            label = "PPT format painter";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp H &kp F &kp P>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <125>;
            flavor = "tap-unless-interrupted";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <4 5 6 7 8 9 10 11 17 18 19 20 21 22 23 25 26 27 28 29 30 31 32 33 34 35>;
            hold-trigger-on-release;
        };
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <125>;
            flavor = "tap-unless-interrupted";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 25 26 27 28 29 30 31 32 33 34 35 36>;
            hold-trigger-on-release;
        };
        hmnqt: homerow_mods_noqt {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            //global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        ut_a: umlaut_a {
            compatible = "zmk,behavior-hold-tap";
            label = "Umlaut ä";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&de_ae>,
                <&kp>;
        };
        ut_o: umlaut_o {
            compatible = "zmk,behavior-hold-tap";
            label = "Umlaut ö";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&de_oe>,
                <&kp>;
        };
        ut_u: umlaut_u {
            compatible = "zmk,behavior-hold-tap";
            label = "Umlaut ü";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&de_ue>,
                <&kp>;
        };
        ut_sz: umlaut_sz {
            compatible = "zmk,behavior-hold-tap";
            label = "Umlaut ß";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&de_eszett>,
                <&kp>;
        };
        eur_dol: euro_dollar {
            compatible = "zmk,behavior-hold-tap";
            label = "Euro / Dollar";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&euro_sign>,
                <&kp>;
        };
        fpt: fpt {
            compatible = "zmk,behavior-hold-tap";
            label = "Fornmat painter";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings =
                <&ppt_fp>,
                <&kp>;
        };
        ltsl: layerTapSL {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer toggle / sticky layer";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
            bindings =
                <&mo>,
                <&sl>;
        };
        htsk: htsk {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold-Tap with Sticky Key";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&sk>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tog_qwertz {
            bindings = <&tog 1>;
            key-positions = <24 35>;
            layers = <0 1>;
        };

        tog_num {
            bindings = <&tog 4>;
            key-positions = <40 41>;
            layers = <0 4 1>;
        };

        caps_word_combo {
            bindings = <&caps_word>;
            key-positions = <15 20>;
            layers = <0 1>;
        };

        escape {
            bindings = <&hm LG(LA(K)) ESC>;
            key-positions = <0 1>;
            layers = <0 1 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &hm LG(LA(K)) ESC   &kp Q           &kp W        &kp F          &kp P           &kp B        &kp J        &kp L         &ut_u UUML U  &kp Y         &kp SEMICOLON   &kp BSPC
            &kp TAB             &hml RGUI A     &hml LALT R  &hml LSHFT S   &hmnqt LCTRL T    &kp G        &kp M        &hmr RCTRL N  &hmr RSHFT E  &hmr LALT I   &hmr LGUI O     &kp SQT
            &caps_word          &ut_sz DESZ Z   &kp X        &kp C          &kp D           &kp V        &kp K        &kp H         &kp COMMA     &kp DOT       &kp FSLH        &kp LGUI
                                                &lt FUN TAB  &ltsl NAV UML  &kp SPACE       &kp ENTER  &lt NUM BSPC   &lt SYM DEL
            >;

            label = "base";
        };

        qwertz_layer {
            bindings = <
            &hm LG(LA(K)) ESC   &kp Q           &kp W           &kp E           &kp R            &kp T    &ut_sz DESZ Z     &ut_u UUML U    &kp I           &ut_o OUML O    &kp P       &kp BSPC
            &kp TAB             &ut_a AUML A    &hml LALT S     &hml LSHFT D    &hmnqt LCTRL F     &kp G            &kp H     &hmr RCTRL J    &hmr RSHFT K    &hmr LALT L     &kp SEMI    &kp SQT
            &sk LSHFT           &kp Y           &kp X           &kp C           &kp V            &kp B            &kp N     &kp M           &kp COMMA       &kp DOT         &kp FSLH    &kp LGUI
                                                &lt FUN ESC     &mo NAV         &kp SPACE        &kp ENTER  &lt NUM BSPC  &lt SYM DEL
            >;

            label = "qwertz";
        };

        nav_layer {
            bindings = <
  &kp ESC        &none      &none    &ppt_fp            &none      &none          &kp LC(Y)     &kp LC(V)   &kp LC(C)   &kp LC(X)   &kp LC(Z)   &none
  &kp TAB  &kp LS(DEL)   &kp LALT  &kp LSHFT        &kp LCTRL  &kp LC(Z)    &kp PRINTSCREEN     &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &none
&kp LSHFT    &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp PRINTSCREEN  &kp LC(V)            &kp INS     &kp HOME    &kp PG_DN   &kp PG_UP   &kp END     &none
                                       &none            &none      &none         &kp RETURN     &kp DEL      &none
            >;

            label = "navi";
        };

        symbol_layer {
            bindings = <
  &kp ESC      &kp KP_PLUS           &kp EXCL           &kp AT   &kp HASH     &none    &kp CARET   &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR   &kp BSPC
  &kp TAB     &kp KP_MINUS  &eur_dol EUR DLLR        &kp PRCNT  &kp CARET     &none    &kp MINUS  &kp EQUAL         &kp LBKT  &kp RBKT  &kp PIPE  &kp GRAVE
&kp LSHFT  &kp KP_ASTERISK           &kp AMPS  &kp KP_MULTIPLY   &kp LPAR  &kp RPAR    &kp UNDER   &kp PLUS         &kp LBRC  &kp RBRC  &kp BSLH  &kp TILDE
                                                         &none  &kp SPACE     &none        &none      &none            &none
            >;

            label = "symbol";
        };

        num_layer {
            bindings = <
&tog NUM      &kp KP_PLUS  &kp N1  &kp NUMBER_2  &kp N3  &kp KP_DIVIDE    &none   &none      &none     &none  &none  &none
  &trans     &kp KP_MINUS  &kp N4        &kp N5  &kp N6        &kp DOT    &none   &kp RCTRL  &kp RSHFT  &kp RALT  &kp RGUI  &none
  &trans  &kp KP_ASTERISK  &kp N7        &kp N8  &kp N9      &kp COMMA    &none   &none      &none     &none  &none  &none
                                     &kp DELETE  &kp N0     &kp RETURN    &none   &tog NUM      &none
            >;

            label = "num";
        };

        function_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &out OUT_TOG  &kp C_PREV  &kp C_NEXT  &kp C_VOL_UP   &kp F1   &kp F2   &kp F3   &kp F4  &none  &tog QWE
&bt BT_SEL 2  &bt BT_SEL 3  &none         &kp LSHFT   &kp C_PP    &kp C_VOL_DN   &kp F5   &kp F6   &kp F7   &kp F8  &none  &tog NUM
&bt BT_SEL 4  &bt BT_CLR    &none         &none       &none       &kp C_MUTE     &kp F9   &kp F10  &kp F11  &kp F12 &none  &none
                                          &none       &none       &none          &none    &none    &none
            >;

            label = "function";
        };

        umlaut_layer {
            bindings = <
&trans  &trans  &trans      &trans  &trans  &trans    &trans  &trans      &de_ue  &trans  &trans  &trans
&trans  &de_ae  &trans  &de_eszett  &trans  &trans    &trans  &trans  &euro_sign  &trans  &de_oe     &kp
&trans  &trans  &trans      &trans  &trans  &trans    &trans  &trans      &trans  &trans  &trans  &trans
                            &trans  &trans  &trans    &trans  &trans      &trans
            >;

            label = "umlaut";
        };
    };
};
